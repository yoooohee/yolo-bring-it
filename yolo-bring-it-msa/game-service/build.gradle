plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.4'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'com.google.protobuf' version '0.9.4'
}

group = 'com.yolo.bringit'
version = '1.0'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('springCloudVersion', "2025.0.0")
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client:4.3.0'

    // swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'

    // spring security
    implementation 'org.springframework.boot:spring-boot-starter-security:3.1.1'

    // validation
    implementation 'jakarta.validation:jakarta.validation-api:3.1.1'

    implementation 'com.drewnoakes:metadata-extractor:2.19.0' // EXIF 처리
    implementation 'org.imgscalr:imgscalr-lib:4.2' // 이미지 리사이징

    // kafka
    implementation 'org.springframework.kafka:spring-kafka'
    testImplementation 'org.springframework.kafka:spring-kafka-test'

    // spring data JPA
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    runtimeOnly 'com.h2database:h2:2.3.232'
    runtimeOnly 'org.postgresql:postgresql:42.6.0'
    implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.9.0'

    // redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis:3.2.0'

    // websocket
    implementation 'org.springframework.boot:spring-boot-starter-websocket'

    // actuator
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    // config-service
    implementation 'org.springframework.cloud:spring-cloud-starter-config'
    implementation 'org.springframework.cloud:spring-cloud-starter-bootstrap'

    // amqp
    implementation 'org.springframework.cloud:spring-cloud-starter-bus-amqp'

    // jwt
    implementation 'com.auth0:java-jwt:4.4.0'
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    implementation 'io.jsonwebtoken:jjwt:0.9.1'

    //querydsl
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // binding
    implementation 'javax.xml.bind:jaxb-api:2.3.1'

    // grpc
    implementation 'net.devh:grpc-server-spring-boot-starter:2.15.0.RELEASE'
    implementation 'javax.annotation:javax.annotation-api:1.3.2'
    implementation 'com.google.protobuf:protobuf-java:3.25.3'
    implementation 'io.grpc:grpc-protobuf:1.58.0'
    implementation 'io.grpc:grpc-stub:1.58.0'
    implementation 'io.grpc:grpc-netty:1.58.0'

    // open feign
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'

    // resilience4j
    implementation 'org.springframework.cloud:spring-cloud-starter-circuitbreaker-resilience4j'
    implementation 'io.github.resilience4j:resilience4j-retry'

    // zipkin
    implementation 'io.micrometer:micrometer-tracing-bridge-brave'
    implementation 'io.zipkin.reporter2:zipkin-reporter-brave'

    // s3
    implementation 'com.amazonaws:aws-java-sdk-s3:1.12.730'

    // livekit
    implementation 'io.livekit:livekit-server:0.10.0'

    // gson
    implementation 'com.google.code.gson:gson:2.10.1'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

protobuf {
    protoc { artifact = 'com.google.protobuf:protoc:3.25.3' }
    plugins { grpc { artifact = 'io.grpc:protoc-gen-grpc-java:1.58.0' } }
    generateProtoTasks {
        all().each { task ->
            task.builtins { java {} }
            task.plugins { grpc {} }
        }
    }
}

sourceSets {
    main {
        proto { srcDir 'src/main/proto' }
        java { srcDir 'build/generated/source/proto/main/java' }
        java { srcDir 'build/generated/source/proto/main/grpc' }
    }
}

tasks.named('processResources') {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

test {
    systemProperty 'spring.profiles.active', 'test'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

tasks.named('test') {
    useJUnitPlatform()
}
