import { RecordingProperties } from './RecordingProperties';
import { RecordingLayout } from './RecordingLayout';
/**
 * See {@link OpenVidu.startRecording}
 */
export declare class Recording {
    /**
     * Recording unique identifier
     */
    id: string;
    /**
     * Session associated to the recording
     */
    sessionId: string;
    /**
     * Time when the recording started in UTC milliseconds
     */
    createdAt: number;
    /**
     * Size of the recording in bytes (0 until the recording is stopped)
     */
    size: number;
    /**
     * Duration of the recording in seconds (0 until the recording is stopped)
     */
    duration: number;
    /**
     * URL of the recording. You can access the file from there. It is `null` until recording reaches "ready" or "failed" status. If OpenVidu Server configuration property `OPENVIDU_RECORDING_PUBLIC_ACCESS` is false, this path will be secured with OpenVidu credentials
     */
    url: string;
    /**
     * Status of the recording
     */
    status: Recording.Status;
    /**
     * Technical properties of the recorded file
     */
    properties: RecordingProperties;
    /**
     * @hidden
     */
    constructor(json: JSON);
}
export declare namespace Recording {
    /**
     * See {@link Recording.status}
     */
    enum Status {
        /**
         * The recording is starting (cannot be stopped). Some recording may not go
         * through this status and directly reach "started" status
         */
        starting = "starting",
        /**
         * The recording has started and is going on
         */
        started = "started",
        /**
         * The recording has stopped and is being processed. At some point it will reach
         * "ready" status
         */
        stopped = "stopped",
        /**
         * The recording has finished being processed and is available for download through
         * property {@link Recording.url}
         */
        ready = "ready",
        /**
         * The recording has failed. This status may be reached from "starting",
         * "started" and "stopped" status
         */
        failed = "failed"
    }
    /**
     * See {@link RecordingProperties.outputMode}
     */
    enum OutputMode {
        /**
         * Record all streams in a grid layout in a single archive
         */
        COMPOSED = "COMPOSED",
        /**
         * Works the same way as COMPOSED mode, but the necessary recorder
         * service module will start some time in advance and won't be terminated
         * once a specific session recording has ended. This module will remain
         * up and running as long as the session remains active.
         *
         * - **Pros vs COMPOSED**: the process of starting the recording will be noticeably
         * faster. This can be very useful in use cases where a session needs to be
         * recorded multiple times over time, when a better response time is usually
         * desirable.

         * - **Cons vs COMPOSED**: for every session initialized with COMPOSED_QUICK_START
         * recording output mode, extra CPU power will be required in OpenVidu Server.
         * The recording module will be continuously rendering all of the streams being
         * published to the session even when the session is not being recorded. And that
         * is for every session configured with COMPOSED_QUICK_START.
         */
        COMPOSED_QUICK_START = "COMPOSED_QUICK_START",
        /**
         * Record each stream individually
         */
        INDIVIDUAL = "INDIVIDUAL"
    }
    /**
     * @hidden
     */
    class DefaultRecordingPropertiesValues {
        static readonly hasAudio: boolean;
        static readonly hasVideo: boolean;
        static readonly outputMode: Recording.OutputMode;
        static readonly recordingLayout: RecordingLayout;
        static readonly resolution: string;
        static readonly frameRate: number;
        static readonly shmSize: number;
        static readonly ignoreFailedStreams: boolean;
    }
}
