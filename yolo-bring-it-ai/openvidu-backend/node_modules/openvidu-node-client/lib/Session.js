"use strict";
/*
 * (C) Copyright 2017-2022 OpenVidu (https://openvidu.io)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Session = void 0;
var axios_1 = require("axios");
var Connection_1 = require("./Connection");
var MediaMode_1 = require("./MediaMode");
var OpenVidu_1 = require("./OpenVidu");
var Recording_1 = require("./Recording");
var RecordingLayout_1 = require("./RecordingLayout");
var RecordingMode_1 = require("./RecordingMode");
var OpenViduLogger_1 = require("./Logger/OpenViduLogger");
var logger = OpenViduLogger_1.OpenViduLogger.getInstance();
var Session = /** @class */ (function () {
    /**
     * @hidden
     */
    function Session(ov, propertiesOrJson) {
        this.ov = ov;
        /**
         * Array of Connections to the Session. This property always initialize as an empty array and
         * **will remain unchanged since the last time method {@link Session.fetch} or {@link OpenVidu.fetch} was called**.
         * Exceptions to this rule are:
         *
         * - Calling {@link Session.createConnection} automatically adds the new Connection object to the local collection.
         * - Calling {@link Session.forceUnpublish} automatically updates each affected local Connection object.
         * - Calling {@link Session.forceDisconnect} automatically updates each affected local Connection object.
         * - Calling {@link Session.updateConnection} automatically updates the attributes of the affected local Connection object.
         *
         * To get the array of Connections with their current actual value, you must call {@link Session.fetch} or {@link OpenVidu.fetch}
         * before consulting property {@link connections}
         */
        this.connections = [];
        /**
         * Array containing the active Connections of the Session. It is a subset of {@link Session.connections} array containing only
         * those Connections with property {@link Connection.status} to `active`.
         *
         * To get the array of active Connections with their current actual value, you must call {@link Session.fetch} or {@link OpenVidu.fetch}
         * before consulting property {@link activeConnections}
         */
        this.activeConnections = [];
        /**
         * Whether the session is being recorded or not
         */
        this.recording = false;
        /**
         * Whether the session is being broadcasted or not
         */
        this.broadcasting = false;
        if (!!propertiesOrJson) {
            // Defined parameter
            if (!!propertiesOrJson.sessionId) {
                // Parameter is a JSON representation of Session ('sessionId' property always defined)
                this.resetWithJson(propertiesOrJson);
            }
            else {
                // Parameter is a SessionProperties object
                this.properties = propertiesOrJson;
            }
        }
        else {
            // Empty parameter
            this.properties = {};
        }
        this.sanitizeDefaultSessionProperties(this.properties);
    }
    /**
     * @deprecated Use {@link Session.createConnection} instead to get a {@link Connection} object.
     *
     * @returns A Promise that is resolved to the generated _token_ string if success and rejected with an
     * [Error](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error) object if not
     */
    Session.prototype.generateToken = function (tokenOptions) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var data = JSON.stringify({
                session: _this.sessionId,
                role: !!tokenOptions && !!tokenOptions.role ? tokenOptions.role : null,
                data: !!tokenOptions && !!tokenOptions.data ? tokenOptions.data : null,
                kurentoOptions: !!tokenOptions && !!tokenOptions.kurentoOptions ? tokenOptions.kurentoOptions : null
            });
            axios_1.default
                .post(_this.ov.host + OpenVidu_1.OpenVidu.API_TOKENS, data, {
                headers: {
                    Authorization: _this.ov.basicAuth,
                    'Content-Type': 'application/json'
                },
                validateStatus: function (_) { return true; }
            })
                .then(function (res) {
                if (res.status === 200) {
                    // SUCCESS response from openvidu-server. Resolve token
                    resolve(res.data.token);
                }
                else {
                    // ERROR response from openvidu-server. Resolve HTTP status
                    _this.ov.handleError(res, reject);
                }
            })
                .catch(function (error) {
                // Request error.
                _this.ov.handleError(error, reject);
            });
        });
    };
    /**
     * Creates a new Connection object associated to Session object and configured with
     * `connectionProperties`. Each user connecting to the Session requires a Connection.
     * The token string value to send to the client side is available at {@link Connection.token}.
     *
     * @returns A Promise that is resolved to the generated {@link Connection} object if success and rejected with an
     * [Error](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error) object if not
     */
    Session.prototype.createConnection = function (connectionProperties) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var data = JSON.stringify({
                type: !!connectionProperties && !!connectionProperties.type ? connectionProperties.type : null,
                data: !!connectionProperties && !!connectionProperties.data ? connectionProperties.data : null,
                record: !!connectionProperties ? connectionProperties.record : null,
                role: !!connectionProperties && !!connectionProperties.role ? connectionProperties.role : null,
                kurentoOptions: !!connectionProperties && !!connectionProperties.kurentoOptions ? connectionProperties.kurentoOptions : null,
                rtspUri: !!connectionProperties && !!connectionProperties.rtspUri ? connectionProperties.rtspUri : null,
                adaptativeBitrate: !!connectionProperties ? connectionProperties.adaptativeBitrate : null,
                onlyPlayWithSubscribers: !!connectionProperties ? connectionProperties.onlyPlayWithSubscribers : null,
                networkCache: !!connectionProperties && connectionProperties.networkCache != null ? connectionProperties.networkCache : null,
                customIceServers: !!connectionProperties && !!connectionProperties.customIceServers != null ? connectionProperties.customIceServers : null
            });
            axios_1.default
                .post(_this.ov.host + OpenVidu_1.OpenVidu.API_SESSIONS + '/' + _this.sessionId + '/connection', data, {
                headers: {
                    Authorization: _this.ov.basicAuth,
                    'Content-Type': 'application/json'
                },
                validateStatus: function (_) { return true; }
            })
                .then(function (res) {
                if (res.status === 200) {
                    // SUCCESS response from openvidu-server. Store and resolve Connection
                    var connection = new Connection_1.Connection(res.data);
                    _this.connections.push(connection);
                    if (connection.status === 'active') {
                        _this.activeConnections.push(connection);
                    }
                    resolve(new Connection_1.Connection(res.data));
                }
                else {
                    // ERROR response from openvidu-server. Resolve HTTP status
                    _this.ov.handleError(res, reject);
                }
            })
                .catch(function (error) {
                // Request error.
                _this.ov.handleError(error, reject);
            });
        });
    };
    /**
     * Gracefully closes the Session: unpublishes all streams and evicts every participant
     *
     * @returns A Promise that is resolved if the session has been closed successfully and rejected with an
     * [Error](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error) object if not
     */
    Session.prototype.close = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            axios_1.default
                .delete(_this.ov.host + OpenVidu_1.OpenVidu.API_SESSIONS + '/' + _this.sessionId, {
                headers: {
                    Authorization: _this.ov.basicAuth,
                    'Content-Type': 'application/x-www-form-urlencoded'
                },
                validateStatus: function (_) { return true; }
            })
                .then(function (res) {
                if (res.status === 204) {
                    // SUCCESS response from openvidu-server
                    var indexToRemove = _this.ov.activeSessions.findIndex(function (s) { return s.sessionId === _this.sessionId; });
                    _this.ov.activeSessions.splice(indexToRemove, 1);
                    resolve();
                }
                else {
                    // ERROR response from openvidu-server. Resolve HTTP status
                    _this.ov.handleError(res, reject);
                }
            })
                .catch(function (error) {
                // Request error.
                _this.ov.handleError(error, reject);
            });
        });
    };
    /**
     * Updates every property of the Session with the current status it has in OpenVidu Server. This is especially useful for accessing the list of
     * Connections of the Session ({@link Session.connections}, {@link Session.activeConnections}) and use those values to call {@link Session.forceDisconnect},
     * {@link Session.forceUnpublish} or {@link Session.updateConnection}.
     *
     * To update all Session objects owned by OpenVidu object at once, call {@link OpenVidu.fetch}
     *
     * @returns A promise resolved to true if the Session status has changed with respect to the server, or to false if not.
     *          This applies to any property or sub-property of the Session object
     */
    Session.prototype.fetch = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var beforeJSON = JSON.stringify(_this, _this.removeCircularOpenViduReference);
            axios_1.default
                .get(_this.ov.host + OpenVidu_1.OpenVidu.API_SESSIONS + '/' + _this.sessionId + '?pendingConnections=true', {
                headers: {
                    Authorization: _this.ov.basicAuth,
                    'Content-Type': 'application/x-www-form-urlencoded'
                },
                validateStatus: function (_) { return true; }
            })
                .then(function (res) {
                if (res.status === 200) {
                    // SUCCESS response from openvidu-server
                    _this.resetWithJson(res.data);
                    var afterJSON = JSON.stringify(_this, _this.removeCircularOpenViduReference);
                    var hasChanged = !(beforeJSON === afterJSON);
                    logger.log("Session info fetched for session '" + _this.sessionId + "'. Any change: " + hasChanged);
                    resolve(hasChanged);
                }
                else {
                    // ERROR response from openvidu-server. Resolve HTTP status
                    _this.ov.handleError(res, reject);
                }
            })
                .catch(function (error) {
                // Request error.
                _this.ov.handleError(error, reject);
            });
        });
    };
    /**
     * Removes the Connection from the Session. This can translate into a forced eviction of a user from the Session if the
     * Connection had status `active` or into a token invalidation if no user had taken the Connection yet (status `pending`).
     *
     * In the first case, OpenVidu Browser will trigger the proper events in the client-side (`streamDestroyed`, `connectionDestroyed`,
     * `sessionDisconnected`) with reason set to `"forceDisconnectByServer"`.
     *
     * In the second case, the token of the Connection will be invalidated and no user will be able to connect to the session with it.
     *
     * This method automatically updates the properties of the local affected objects. This means that there is no need to call
     * {@link Session.fetch} or {@link OpenVidu.fetch}] to see the changes consequence of the execution of this method applied in the local objects.
     *
     * @param connection The Connection object to remove from the session, or its `connectionId` property
     *
     * @returns A Promise that is resolved if the Connection was successfully removed from the Session and rejected with an
     * [Error](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error) object if not
     */
    Session.prototype.forceDisconnect = function (connection) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var connectionId = typeof connection === 'string' ? connection : connection.connectionId;
            axios_1.default
                .delete(_this.ov.host + OpenVidu_1.OpenVidu.API_SESSIONS + '/' + _this.sessionId + '/connection/' + connectionId, {
                headers: {
                    Authorization: _this.ov.basicAuth,
                    'Content-Type': 'application/x-www-form-urlencoded'
                },
                validateStatus: function (_) { return true; }
            })
                .then(function (res) {
                if (res.status === 204) {
                    // SUCCESS response from openvidu-server
                    // Remove connection from connections array
                    var connectionClosed_1;
                    _this.connections = _this.connections.filter(function (con) {
                        if (con.connectionId !== connectionId) {
                            return true;
                        }
                        else {
                            connectionClosed_1 = con;
                            return false;
                        }
                    });
                    // Remove every Publisher of the closed connection from every subscriber list of other connections
                    if (!!connectionClosed_1) {
                        connectionClosed_1.publishers.forEach(function (publisher) {
                            _this.connections.forEach(function (con) {
                                con.subscribers = con.subscribers.filter(function (subscriber) {
                                    // tslint:disable:no-string-literal
                                    if (!!subscriber['streamId']) {
                                        // Subscriber with advanced webRtc configuration properties
                                        return subscriber['streamId'] !== publisher.streamId;
                                        // tslint:enable:no-string-literal
                                    }
                                    else {
                                        // Regular string subscribers
                                        return subscriber !== publisher.streamId;
                                    }
                                });
                            });
                        });
                    }
                    else {
                        logger.warn("The closed connection wasn't fetched in OpenVidu Node Client. No changes in the collection of active connections of the Session");
                    }
                    _this.updateActiveConnectionsArray();
                    logger.log("Connection '" + connectionId + "' closed");
                    resolve();
                }
                else {
                    // ERROR response from openvidu-server. Resolve HTTP status
                    _this.ov.handleError(res, reject);
                }
            })
                .catch(function (error) {
                // Request error.
                _this.ov.handleError(error, reject);
            });
        });
    };
    /**
     * Forces some Connection to unpublish a Stream (identified by its `streamId` or the corresponding {@link Publisher} object owning it).
     * OpenVidu Browser will trigger the proper events on the client-side (`streamDestroyed`) with reason set to `"forceUnpublishByServer"`.
     *
     * You can get `publisher` parameter from {@link Connection.publishers} array ({@link Publisher.streamId} for getting each `streamId` property).
     * Remember to call {@link Session.fetch} or {@link OpenVidu.fetch} before to fetch the current actual properties of the Session from OpenVidu Server
     *
     * This method automatically updates the properties of the local affected objects. This means that there is no need to call
     * {@link Session.fetch} or {@link OpenVidu.fetch} to see the changes consequence of the execution of this method applied in the local objects.
     *
     * @param publisher The Publisher object to unpublish, or its `streamId` property
     *
     * @returns A Promise that is resolved if the stream was successfully unpublished and rejected with an
     * [Error](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error) object if not
     */
    Session.prototype.forceUnpublish = function (publisher) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var streamId = typeof publisher === 'string' ? publisher : publisher.streamId;
            axios_1.default
                .delete(_this.ov.host + OpenVidu_1.OpenVidu.API_SESSIONS + '/' + _this.sessionId + '/stream/' + streamId, {
                headers: {
                    Authorization: _this.ov.basicAuth,
                    'Content-Type': 'application/x-www-form-urlencoded'
                },
                validateStatus: function (_) { return true; }
            })
                .then(function (res) {
                if (res.status === 204) {
                    // SUCCESS response from openvidu-server
                    _this.connections.forEach(function (connection) {
                        // Try to remove the Publisher from the Connection publishers collection
                        connection.publishers = connection.publishers.filter(function (pub) { return pub.streamId !== streamId; });
                        // Try to remove the Publisher from the Connection subscribers collection
                        if (!!connection.subscribers && connection.subscribers.length > 0) {
                            // tslint:disable:no-string-literal
                            if (!!connection.subscribers[0]['streamId']) {
                                // Subscriber with advanced webRtc configuration properties
                                connection.subscribers = connection.subscribers.filter(function (sub) { return sub['streamId'] !== streamId; });
                                // tslint:enable:no-string-literal
                            }
                            else {
                                // Regular string subscribers
                                connection.subscribers = connection.subscribers.filter(function (sub) { return sub !== streamId; });
                            }
                        }
                    });
                    _this.updateActiveConnectionsArray();
                    logger.log("Stream '" + streamId + "' unpublished");
                    resolve();
                }
                else {
                    // ERROR response from openvidu-server. Resolve HTTP status
                    _this.ov.handleError(res, reject);
                }
            })
                .catch(function (error) {
                // Request error.
                _this.ov.handleError(error, reject);
            });
        });
    };
    /**
     * **This feature is part of OpenVidu
     * <a href="https://docs.openvidu.io/en/2.23.0/openvidu-pro/" style="display: inline-block; background-color: rgb(0, 136, 170); color: white; font-weight: bold; padding: 0px 5px; margin: 0 2px 0 2px; border-radius: 3px; font-size: 13px; line-height:21px; text-decoration: none; font-family: Montserrat, sans-serif">PRO</a>
     * and
     * <a href="https://docs.openvidu.io/en/2.23.0/openvidu-enterprise/" style="display: inline-block; background-color: rgb(156, 39, 176); color: white; font-weight: bold; padding: 0px 5px; margin: 0 2px 0 2px; border-radius: 3px; font-size: 13px; line-height:21px; text-decoration: none; font-family: Montserrat, sans-serif">ENTERPRISE</a>
     * editions**
     *
     * Updates the properties of a Connection  with a {@link ConnectionProperties} object.
     * Only these properties can be updated:
     *
     * - {@link ConnectionProperties.role}
     * - {@link ConnectionProperties.record}
     *
     * This method automatically updates the properties of the local affected objects. This means that there is no need to call
     * {@link Session.fetch} or {@link OpenVidu.fetch} to see the changes consequence of the execution of this method applied in the local objects.
     *
     * The affected client will trigger one [ConnectionPropertyChangedEvent](/en/stable/api/openvidu-browser/classes/ConnectionPropertyChangedEvent.html)
     * for each modified property.
     *
     * @param connectionId The {@link Connection.connectionId} of the Connection object to modify
     * @param connectionProperties A new {@link ConnectionProperties} object with the updated values to apply
     *
     * @returns A Promise that is resolved to the updated {@link Connection} object if the operation was
     *          successful and rejected with an [Error](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error) object if not
     */
    Session.prototype.updateConnection = function (connectionId, connectionProperties) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            axios_1.default
                .patch(_this.ov.host + OpenVidu_1.OpenVidu.API_SESSIONS + '/' + _this.sessionId + '/connection/' + connectionId, connectionProperties, {
                headers: {
                    Authorization: _this.ov.basicAuth,
                    'Content-Type': 'application/json'
                },
                validateStatus: function (_) { return true; }
            })
                .then(function (res) {
                if (res.status === 200) {
                    logger.log('Connection ' + connectionId + ' updated');
                }
                else {
                    // ERROR response from openvidu-server. Resolve HTTP status
                    _this.ov.handleError(res, reject);
                    return;
                }
                // Update the actual Connection object with the new options
                var existingConnection = _this.connections.find(function (con) { return con.connectionId === connectionId; });
                if (!existingConnection) {
                    // The updated Connection is not available in local map
                    var newConnection = new Connection_1.Connection(res.data);
                    _this.connections.push(newConnection);
                    _this.updateActiveConnectionsArray();
                    resolve(newConnection);
                }
                else {
                    // The updated Connection was available in local map
                    existingConnection.overrideConnectionProperties(connectionProperties);
                    _this.updateActiveConnectionsArray();
                    resolve(existingConnection);
                }
            })
                .catch(function (error) {
                // Request error.
                _this.ov.handleError(error, reject);
            });
        });
    };
    /**
     * @hidden
     */
    Session.prototype.getSessionId = function () {
        return this.sessionId;
    };
    /**
     * @hidden
     */
    Session.prototype.getSessionHttp = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (!!_this.sessionId) {
                resolve(_this.sessionId);
            }
            _this.sanitizeDefaultSessionProperties(_this.properties);
            var data = JSON.stringify(_this.properties);
            axios_1.default
                .post(_this.ov.host + OpenVidu_1.OpenVidu.API_SESSIONS, data, {
                headers: {
                    Authorization: _this.ov.basicAuth,
                    'Content-Type': 'application/json'
                },
                validateStatus: function (_) { return true; }
            })
                .then(function (res) {
                if (res.status === 200) {
                    // SUCCESS response from openvidu-server. Resolve token
                    _this.sessionId = res.data.id;
                    _this.createdAt = res.data.createdAt;
                    _this.properties.mediaMode = res.data.mediaMode;
                    _this.properties.recordingMode = res.data.recordingMode;
                    _this.properties.customSessionId = res.data.customSessionId;
                    _this.properties.defaultRecordingProperties = res.data.defaultRecordingProperties;
                    _this.properties.mediaNode = res.data.mediaNode;
                    _this.properties.forcedVideoCodec = res.data.forcedVideoCodec;
                    _this.properties.allowTranscoding = res.data.allowTranscoding;
                    _this.sanitizeDefaultSessionProperties(_this.properties);
                    resolve(_this.sessionId);
                }
                else if (res.status === 409) {
                    // 'customSessionId' already existed
                    _this.sessionId = _this.properties.customSessionId;
                    _this.fetch()
                        .then(function () { return resolve(_this.sessionId); })
                        .catch(function (error) { return _this.ov.handleError(error, reject); });
                }
                else {
                    // ERROR response from openvidu-server. Resolve HTTP status
                    _this.ov.handleError(res, reject);
                }
            })
                .catch(function (error) {
                // Request error.
                _this.ov.handleError(error, reject);
            });
        });
    };
    /**
     * @hidden
     */
    Session.prototype.resetWithJson = function (json) {
        var _this = this;
        this.sessionId = json.sessionId;
        this.createdAt = json.createdAt;
        this.recording = json.recording;
        this.broadcasting = json.broadcasting;
        this.properties = {
            customSessionId: json.customSessionId,
            mediaMode: json.mediaMode,
            recordingMode: json.recordingMode,
            defaultRecordingProperties: json.defaultRecordingProperties,
            forcedVideoCodec: json.forcedVideoCodec,
            allowTranscoding: json.allowTranscoding
        };
        this.sanitizeDefaultSessionProperties(this.properties);
        if (json.defaultRecordingProperties == null) {
            delete this.properties.defaultRecordingProperties;
        }
        if (json.customSessionId == null) {
            delete this.properties.customSessionId;
        }
        if (json.mediaNode == null) {
            delete this.properties.mediaNode;
        }
        if (json.forcedVideoCodec == null) {
            delete this.properties.forcedVideoCodec;
        }
        if (json.allowTranscoding == null) {
            delete this.properties.allowTranscoding;
        }
        // 1. Array to store fetched connections and later remove closed ones
        var fetchedConnectionIds = [];
        json.connections.content.forEach(function (jsonConnection) {
            var connectionObj = new Connection_1.Connection(jsonConnection);
            fetchedConnectionIds.push(connectionObj.connectionId);
            var storedConnection = _this.connections.find(function (c) { return c.connectionId === connectionObj.connectionId; });
            if (!!storedConnection) {
                // 2. Update existing Connection
                storedConnection.resetWithJson(jsonConnection);
            }
            else {
                // 3. Add new Connection
                _this.connections.push(connectionObj);
            }
        });
        // 4. Remove closed sessions from local collection
        for (var i = this.connections.length - 1; i >= 0; --i) {
            if (!fetchedConnectionIds.includes(this.connections[i].connectionId)) {
                this.connections.splice(i, 1);
            }
        }
        // Order connections by time of creation
        this.connections.sort(function (c1, c2) { return (c1.createdAt > c2.createdAt ? 1 : c2.createdAt > c1.createdAt ? -1 : 0); });
        // Order Ice candidates in connection properties
        this.connections.forEach(function (connection) {
            if (connection.connectionProperties.customIceServers != null && connection.connectionProperties.customIceServers.length > 0) {
                // Order alphabetically Ice servers using url just to keep the same list order.
                var simpleIceComparator = function (a, b) { return (a.url > b.url ? 1 : -1); };
                connection.connectionProperties.customIceServers.sort(simpleIceComparator);
            }
        });
        // Populate activeConnections array
        this.updateActiveConnectionsArray();
        return this;
    };
    /**
     * @hidden
     */
    Session.prototype.equalTo = function (other) {
        var equals = this.sessionId === other.sessionId &&
            this.createdAt === other.createdAt &&
            this.recording === other.recording &&
            this.broadcasting === other.broadcasting &&
            this.connections.length === other.connections.length &&
            JSON.stringify(this.properties) === JSON.stringify(other.properties);
        if (equals) {
            var i = 0;
            while (equals && i < this.connections.length) {
                equals = this.connections[i].equalTo(other.connections[i]);
                i++;
            }
            return equals;
        }
        else {
            return false;
        }
    };
    /**
     * @hidden
     */
    Session.prototype.removeCircularOpenViduReference = function (key, value) {
        if (key === 'ov' && value instanceof OpenVidu_1.OpenVidu) {
            return;
        }
        else {
            return value;
        }
    };
    /**
     * @hidden
     */
    Session.prototype.updateActiveConnectionsArray = function () {
        var _this = this;
        this.activeConnections = [];
        this.connections.forEach(function (con) {
            if (con.status === 'active') {
                _this.activeConnections.push(con);
            }
        });
    };
    /**
     * @hidden
     */
    Session.prototype.sanitizeDefaultSessionProperties = function (props) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        props.mediaMode = props.mediaMode != null ? props.mediaMode : MediaMode_1.MediaMode.ROUTED;
        props.recordingMode = props.recordingMode != null ? props.recordingMode : RecordingMode_1.RecordingMode.MANUAL;
        props.customSessionId = props.customSessionId != null ? props.customSessionId : '';
        // Remove null values: either set, or undefined
        props.mediaNode = (_a = props.mediaNode) !== null && _a !== void 0 ? _a : undefined;
        props.forcedVideoCodec = (_b = props.forcedVideoCodec) !== null && _b !== void 0 ? _b : undefined;
        props.allowTranscoding = (_c = props.allowTranscoding) !== null && _c !== void 0 ? _c : undefined;
        if (!props.defaultRecordingProperties) {
            props.defaultRecordingProperties = {};
        }
        props.defaultRecordingProperties.name = ((_d = props.defaultRecordingProperties) === null || _d === void 0 ? void 0 : _d.name) != null ? props.defaultRecordingProperties.name : '';
        props.defaultRecordingProperties.hasAudio =
            ((_e = props.defaultRecordingProperties) === null || _e === void 0 ? void 0 : _e.hasAudio) != null
                ? props.defaultRecordingProperties.hasAudio
                : Recording_1.Recording.DefaultRecordingPropertiesValues.hasAudio;
        props.defaultRecordingProperties.hasVideo =
            ((_f = props.defaultRecordingProperties) === null || _f === void 0 ? void 0 : _f.hasVideo) != null
                ? props.defaultRecordingProperties.hasVideo
                : Recording_1.Recording.DefaultRecordingPropertiesValues.hasVideo;
        props.defaultRecordingProperties.outputMode =
            ((_g = props.defaultRecordingProperties) === null || _g === void 0 ? void 0 : _g.outputMode) != null
                ? props.defaultRecordingProperties.outputMode
                : Recording_1.Recording.DefaultRecordingPropertiesValues.outputMode;
        props.defaultRecordingProperties.mediaNode = (_h = props.defaultRecordingProperties) === null || _h === void 0 ? void 0 : _h.mediaNode;
        if ((props.defaultRecordingProperties.outputMode === Recording_1.Recording.OutputMode.COMPOSED ||
            props.defaultRecordingProperties.outputMode == Recording_1.Recording.OutputMode.COMPOSED_QUICK_START) &&
            props.defaultRecordingProperties.hasVideo) {
            props.defaultRecordingProperties.recordingLayout =
                props.defaultRecordingProperties.recordingLayout != null
                    ? props.defaultRecordingProperties.recordingLayout
                    : Recording_1.Recording.DefaultRecordingPropertiesValues.recordingLayout;
            props.defaultRecordingProperties.resolution =
                props.defaultRecordingProperties.resolution != null
                    ? props.defaultRecordingProperties.resolution
                    : Recording_1.Recording.DefaultRecordingPropertiesValues.resolution;
            props.defaultRecordingProperties.frameRate =
                props.defaultRecordingProperties.frameRate != null
                    ? props.defaultRecordingProperties.frameRate
                    : Recording_1.Recording.DefaultRecordingPropertiesValues.frameRate;
            props.defaultRecordingProperties.shmSize =
                props.defaultRecordingProperties.shmSize != null
                    ? props.defaultRecordingProperties.shmSize
                    : Recording_1.Recording.DefaultRecordingPropertiesValues.shmSize;
            if (props.defaultRecordingProperties.recordingLayout === RecordingLayout_1.RecordingLayout.CUSTOM) {
                props.defaultRecordingProperties.customLayout =
                    props.defaultRecordingProperties.customLayout != null ? props.defaultRecordingProperties.customLayout : '';
            }
        }
        if (props.defaultRecordingProperties.outputMode === Recording_1.Recording.OutputMode.INDIVIDUAL) {
            props.defaultRecordingProperties.ignoreFailedStreams =
                ((_j = props.defaultRecordingProperties) === null || _j === void 0 ? void 0 : _j.ignoreFailedStreams) != null
                    ? props.defaultRecordingProperties.ignoreFailedStreams
                    : Recording_1.Recording.DefaultRecordingPropertiesValues.ignoreFailedStreams;
        }
        this.formatMediaNodeObjectIfNecessary(props.defaultRecordingProperties);
        this.formatMediaNodeObjectIfNecessary(props);
    };
    /**
     * @hidden
     */
    Session.prototype.formatMediaNodeObjectIfNecessary = function (properties) {
        if (properties.mediaNode != null) {
            if (typeof properties.mediaNode === 'string') {
                properties.mediaNode = { id: properties.mediaNode };
            }
        }
    };
    return Session;
}());
exports.Session = Session;
//# sourceMappingURL=Session.js.map