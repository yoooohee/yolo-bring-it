"use strict";
/*
 * (C) Copyright 2017-2022 OpenVidu (https://openvidu.io)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.OpenVidu = void 0;
var axios_1 = require("axios");
var OpenViduLogger_1 = require("./Logger/OpenViduLogger");
var Recording_1 = require("./Recording");
var Session_1 = require("./Session");
var logger = OpenViduLogger_1.OpenViduLogger.getInstance();
var OpenVidu = /** @class */ (function () {
    /**
     * @param hostname URL where your OpenVidu deployment is up an running.
     *                 It must be the full URL (e.g. `https://12.34.56.78:1234/`)
     *
     * @param secret Secret configured in your OpenVidu deployment
     */
    function OpenVidu(hostname, secret) {
        this.hostname = hostname;
        this.Buffer = require('buffer/').Buffer;
        /**
         * Array of active sessions. **This value will remain unchanged since the last time method {@link OpenVidu.fetch}
         * was called**. Exceptions to this rule are:
         *
         * - Calling {@link OpenVidu.createSession} automatically adds the new Session object to the local collection.
         * - Calling {@link Session.fetch} updates that specific Session status
         * - Calling {@link Session.close} automatically removes the Session from the list of active Sessions
         * - Calling {@link Session.forceDisconnect} automatically updates the inner affected connections for that specific Session
         * - Calling {@link Session.forceUnpublish} also automatically updates the inner affected connections for that specific Session
         * - Calling {@link Session.updateConnection} automatically updates the inner affected connection for that specific Session
         * - Calling {@link OpenVidu.startRecording} and {@link OpenVidu.stopRecording} automatically updates the recording status of the Session ({@link Session.recording})
         *
         * To get the array of active sessions with their current actual value, you must call {@link OpenVidu.fetch} before consulting
         * property {@link activeSessions}
         */
        this.activeSessions = [];
        this.setHostnameAndPort();
        this.basicAuth = this.getBasicAuth(secret);
    }
    /**
     * Creates an OpenVidu session. The session identifier will be available at property {@link Session.sessionId}
     *
     * @returns A Promise that is resolved to the {@link Session} if success and rejected with an
     * [Error](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error) object if not.
     * This Error object has as `message` property with a status code carrying a specific meaning
     * (see [REST API](/en/stable/reference-docs/REST-API/#post-recording-start)).
     *
     * This method will never return an Error with status `409`. If a session with the same `customSessionId` already
     * exists in OpenVidu Server, a {@link Session.fetch} operation is performed in the background and the updated Session
     * object is returned.
     */
    OpenVidu.prototype.createSession = function (properties) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var session = new Session_1.Session(_this, properties);
            session
                .getSessionHttp()
                .then(function (response) {
                _this.activeSessions.push(session);
                resolve(session);
            })
                .catch(function (error) {
                reject(error);
            });
        });
    };
    /**
     * Starts the recording of a {@link Session}
     *
     * @param sessionId The `sessionId` of the {@link Session} you want to start recording
     * @param name The name you want to give to the video file. You can access this same value in your clients on recording events (`recordingStarted`, `recordingStopped`)
     * @param properties Custom RecordingProperties to apply to this Recording. This will override the global default values set to the Session with {@link SessionProperties.defaultRecordingProperties}
     *
     * @returns A Promise that is resolved to the {@link Recording} if it successfully started (the recording can be stopped with guarantees) and rejected with an
     * [Error](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error) object if not.
     * This Error object has as `message` property with a status code carrying a specific meaning
     * (see [REST API](/en/stable/reference-docs/REST-API/#post-recording-start)).
     */
    OpenVidu.prototype.startRecording = function (sessionId, param2) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var data;
            if (param2 != null) {
                if (typeof param2 === 'string') {
                    data = JSON.stringify({
                        session: sessionId,
                        name: param2
                    });
                }
                else {
                    var properties = param2;
                    data = {
                        session: sessionId,
                        name: properties.name,
                        outputMode: properties.outputMode,
                        recordingLayout: properties.recordingLayout,
                        customLayout: properties.customLayout,
                        ignoreFailedStreams: properties.ignoreFailedStreams,
                        resolution: properties.resolution,
                        frameRate: properties.frameRate,
                        hasAudio: properties.hasAudio,
                        hasVideo: properties.hasVideo,
                        shmSize: properties.shmSize,
                        mediaNode: properties.mediaNode
                    };
                    data = JSON.stringify(data);
                }
            }
            else {
                data = JSON.stringify({
                    session: sessionId,
                    name: ''
                });
            }
            axios_1.default
                .post(_this.host + OpenVidu.API_RECORDINGS_START, data, {
                headers: {
                    Authorization: _this.basicAuth,
                    'Content-Type': 'application/json'
                },
                validateStatus: function (_) { return true; }
            })
                .then(function (res) {
                if (res.status === 200) {
                    // SUCCESS response from openvidu-server (Recording in JSON format). Resolve new Recording
                    var r_1 = new Recording_1.Recording(res.data);
                    var activeSession = _this.activeSessions.find(function (s) { return s.sessionId === r_1.sessionId; });
                    if (!!activeSession) {
                        activeSession.recording = true;
                    }
                    else {
                        logger.warn("No active session found for sessionId '" +
                            r_1.sessionId +
                            "'. This instance of OpenVidu Node Client didn't create this session");
                    }
                    resolve(r_1);
                }
                else {
                    // ERROR response from openvidu-server. Resolve HTTP status
                    _this.handleError(res, reject);
                }
            })
                .catch(function (error) {
                // Request error.
                _this.handleError(error, reject);
            });
        });
    };
    /**
     * Stops the recording of a {@link Session}
     *
     * @param recordingId The `id` property of the {@link Recording} you want to stop
     *
     * @returns A Promise that is resolved to the {@link Recording} if it successfully stopped and rejected with an
     * [Error](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error) object if not.
     * This Error object has as `message` property with a status code carrying a specific meaning
     * (see [REST API](/en/stable/reference-docs/REST-API/#post-recording-stop)).
     */
    OpenVidu.prototype.stopRecording = function (recordingId) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            axios_1.default
                .post(_this.host + OpenVidu.API_RECORDINGS_STOP + '/' + recordingId, undefined, {
                headers: {
                    Authorization: _this.basicAuth,
                    'Content-Type': 'application/x-www-form-urlencoded'
                },
                validateStatus: function (_) { return true; }
            })
                .then(function (res) {
                if (res.status === 200) {
                    // SUCCESS response from openvidu-server (Recording in JSON format). Resolve new Recording
                    var r_2 = new Recording_1.Recording(res.data);
                    var activeSession = _this.activeSessions.find(function (s) { return s.sessionId === r_2.sessionId; });
                    if (!!activeSession) {
                        activeSession.recording = false;
                    }
                    else {
                        logger.warn("No active session found for sessionId '" +
                            r_2.sessionId +
                            "'. This instance of OpenVidu Node Client didn't create this session");
                    }
                    resolve(r_2);
                }
                else {
                    // ERROR response from openvidu-server. Resolve HTTP status
                    _this.handleError(res, reject);
                }
            })
                .catch(function (error) {
                // Request error.
                _this.handleError(error, reject);
            });
        });
    };
    /**
     * Gets an existing {@link Recording}
     *
     * @param recordingId The `id` property of the {@link Recording} you want to retrieve
     *
     * @returns A Promise that is resolved to the {@link Recording} if it successfully stopped and rejected with an
     * [Error](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error) object if not.
     * This Error object has as `message` property with a status code carrying a specific meaning
     * (see [REST API](/en/stable/reference-docs/REST-API/#get-recording)).
     */
    OpenVidu.prototype.getRecording = function (recordingId) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            axios_1.default
                .get(_this.host + OpenVidu.API_RECORDINGS + '/' + recordingId, {
                headers: {
                    Authorization: _this.basicAuth,
                    'Content-Type': 'application/x-www-form-urlencoded'
                },
                validateStatus: function (_) { return true; }
            })
                .then(function (res) {
                if (res.status === 200) {
                    // SUCCESS response from openvidu-server (Recording in JSON format). Resolve new Recording
                    resolve(new Recording_1.Recording(res.data));
                }
                else {
                    // ERROR response from openvidu-server. Resolve HTTP status
                    _this.handleError(res, reject);
                }
            })
                .catch(function (error) {
                // Request error.
                _this.handleError(error, reject);
            });
        });
    };
    /**
     * Lists all existing recordings
     *
     * @returns A Promise that is resolved to an array with all existing recordings
     */
    OpenVidu.prototype.listRecordings = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            axios_1.default
                .get(_this.host + OpenVidu.API_RECORDINGS, {
                headers: {
                    Authorization: _this.basicAuth
                },
                validateStatus: function (_) { return true; }
            })
                .then(function (res) {
                if (res.status === 200) {
                    // SUCCESS response from openvidu-server (JSON arrays of recordings in JSON format). Resolve list of new recordings
                    var recordingArray = [];
                    var responseItems = res.data.items;
                    for (var _i = 0, responseItems_1 = responseItems; _i < responseItems_1.length; _i++) {
                        var item = responseItems_1[_i];
                        recordingArray.push(new Recording_1.Recording(item));
                    }
                    // Order recordings by time of creation (newest first)
                    recordingArray.sort(function (r1, r2) { return (r1.createdAt < r2.createdAt ? 1 : r2.createdAt < r1.createdAt ? -1 : 0); });
                    resolve(recordingArray);
                }
                else {
                    // ERROR response from openvidu-server. Resolve HTTP status
                    _this.handleError(res, reject);
                }
            })
                .catch(function (error) {
                // Request error.
                _this.handleError(error, reject);
            });
        });
    };
    /**
     * Deletes a {@link Recording}. The recording must have status `stopped`, `ready` or `failed`
     *
     * @param recordingId
     *
     * @returns A Promise that is resolved if the Recording was successfully deleted and rejected with an
     * [Error](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error) object if not.
     * This Error object has as `message` property with a status code carrying a specific meaning
     * (see [REST API](/en/stable/reference-docs/REST-API/#delete-recording)).
     */
    OpenVidu.prototype.deleteRecording = function (recordingId) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            axios_1.default
                .delete(_this.host + OpenVidu.API_RECORDINGS + '/' + recordingId, {
                headers: {
                    Authorization: _this.basicAuth,
                    'Content-Type': 'application/x-www-form-urlencoded'
                },
                validateStatus: function (_) { return true; }
            })
                .then(function (res) {
                if (res.status === 204) {
                    // SUCCESS response from openvidu-server. Resolve undefined
                    resolve(undefined);
                }
                else {
                    // ERROR response from openvidu-server. Resolve HTTP status
                    _this.handleError(res, reject);
                }
            })
                .catch(function (error) {
                // Request error.
                _this.handleError(error, reject);
            });
        });
    };
    /**
     * Starts the broadcast of a {@link Session}
     *
     * @param sessionId The `sessionId` of the {@link Session} you want to start broadcasting
     * @param broadcastUrl The URL where to broadcast
     * @param properties The configuration for this broadcast. It uses a subset of the {@link RecordingProperties}:
     * - {@link RecordingProperties.hasAudio}
     * - {@link RecordingProperties.resolution}
     * - {@link RecordingProperties.frameRate}
     * - {@link RecordingProperties.recordingLayout}
     * - {@link RecordingProperties.customLayout}
     * - {@link RecordingProperties.shmSize}
     * - {@link RecordingProperties.mediaNode}
     *
     * @returns A Promise that is resolved if the broadcast successfully started and rejected with an
     * [Error](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error) object if not.
     * This Error object has as `message` property with a status code carrying a specific meaning
     * (see [REST API](/en/stable/reference-docs/REST-API/#start-broadcast)).
     */
    OpenVidu.prototype.startBroadcast = function (sessionId, broadcastUrl, properties) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var data;
            if (properties != undefined) {
                data = {
                    session: sessionId,
                    broadcastUrl: broadcastUrl,
                    recordingLayout: properties.recordingLayout,
                    customLayout: properties.customLayout,
                    resolution: properties.resolution,
                    frameRate: properties.frameRate,
                    hasAudio: properties.hasAudio,
                    shmSize: properties.shmSize,
                    mediaNode: properties.mediaNode
                };
                data = JSON.stringify(data);
            }
            else {
                data = {
                    session: sessionId,
                    broadcastUrl: broadcastUrl
                };
            }
            axios_1.default
                .post(_this.host + OpenVidu.API_BROADCAST_START, data, {
                headers: {
                    Authorization: _this.basicAuth,
                    'Content-Type': 'application/json'
                },
                validateStatus: function (_) { return true; }
            })
                .then(function (res) {
                if (res.status === 200) {
                    var activeSession = _this.activeSessions.find(function (s) { return s.sessionId === sessionId; });
                    if (!!activeSession) {
                        activeSession.broadcasting = true;
                    }
                    else {
                        logger.warn("No active session found for sessionId '" +
                            sessionId +
                            "'. This instance of OpenVidu Node Client didn't create this session");
                    }
                    resolve();
                }
                else {
                    // ERROR response from openvidu-server. Resolve HTTP status
                    _this.handleError(res, reject);
                }
            })
                .catch(function (error) {
                // Request error.
                _this.handleError(error, reject);
            });
        });
    };
    /**
     * Stops the broadcast of a {@link Session}
     *
     * @param sessionId The `sessionId` of the {@link Session} you want to stop broadcasting
     *
     * @returns A Promise that is resolved if the broadcast successfully stopped and rejected with an
     * [Error](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error) object if not.
     * This Error object has as `message` property with a status code carrying a specific meaning
     * (see [REST API](/en/stable/reference-docs/REST-API/#stop-broadcast)).
     */
    OpenVidu.prototype.stopBroadcast = function (sessionId) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            axios_1.default
                .post(_this.host + OpenVidu.API_BROADCAST_STOP, { session: sessionId }, {
                headers: {
                    Authorization: _this.basicAuth,
                    'Content-Type': 'application/json'
                },
                validateStatus: function (_) { return true; }
            })
                .then(function (res) {
                if (res.status === 200) {
                    // SUCCESS response from openvidu-server
                    var activeSession = _this.activeSessions.find(function (s) { return s.sessionId === sessionId; });
                    if (!!activeSession) {
                        activeSession.broadcasting = false;
                    }
                    else {
                        logger.warn("No active session found for sessionId '" +
                            sessionId +
                            "'. This instance of OpenVidu Node Client didn't create this session");
                    }
                    resolve();
                }
                else {
                    // ERROR response from openvidu-server. Resolve HTTP status
                    _this.handleError(res, reject);
                }
            })
                .catch(function (error) {
                // Request error.
                _this.handleError(error, reject);
            });
        });
    };
    /**
     * Updates every property of every active Session with the current status they have in OpenVidu Server.
     * After calling this method you can access the updated array of active sessions in {@link activeSessions}
     *
     * @returns A promise resolved to true if any Session status has changed with respect to the server, or to false if not.
     * This applies to any property or sub-property of any of the sessions locally stored in OpenVidu Node Client
     */
    OpenVidu.prototype.fetch = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            axios_1.default
                .get(_this.host + OpenVidu.API_SESSIONS + '?pendingConnections=true', {
                headers: {
                    Authorization: _this.basicAuth
                },
                validateStatus: function (_) { return true; }
            })
                .then(function (res) {
                if (res.status === 200) {
                    // Boolean to store if any Session has changed
                    var hasChanged_1 = false;
                    // 1. Array to store fetched sessionIds and later remove closed ones
                    var fetchedSessionIds_1 = [];
                    res.data.content.forEach(function (jsonSession) {
                        var fetchedSession = new Session_1.Session(_this, jsonSession);
                        fetchedSessionIds_1.push(fetchedSession.sessionId);
                        var storedSession = _this.activeSessions.find(function (s) { return s.sessionId === fetchedSession.sessionId; });
                        if (!!storedSession) {
                            // 2. Update existing Session
                            var changed = !storedSession.equalTo(fetchedSession);
                            storedSession.resetWithJson(jsonSession);
                            logger.log("Available session '" + storedSession.sessionId + "' info fetched. Any change: " + changed);
                            hasChanged_1 = hasChanged_1 || changed;
                        }
                        else {
                            // 3. Add new Session
                            _this.activeSessions.push(fetchedSession);
                            logger.log("New session '" + fetchedSession.sessionId + "' info fetched");
                            hasChanged_1 = true;
                        }
                    });
                    // 4. Remove closed sessions from local collection
                    for (var i = _this.activeSessions.length - 1; i >= 0; --i) {
                        var sessionId = _this.activeSessions[i].sessionId;
                        if (!fetchedSessionIds_1.includes(sessionId)) {
                            logger.log("Removing closed session '" + sessionId + "'");
                            hasChanged_1 = true;
                            _this.activeSessions.splice(i, 1);
                        }
                    }
                    logger.log('Active sessions info fetched: ', fetchedSessionIds_1);
                    resolve(hasChanged_1);
                }
                else {
                    // ERROR response from openvidu-server. Resolve HTTP status
                    _this.handleError(res, reject);
                }
            })
                .catch(function (error) {
                // Request error.
                _this.handleError(error, reject);
            });
        });
    };
    /**
     * @hidden
     * @returns A map paring every existing sessionId with true or false depending on whether it has changed or not
     */
    OpenVidu.prototype.fetchWebRtc = function () {
        var _this = this;
        // tslint:disable:no-string-literal
        var addWebRtcStatsToConnections = function (connection, connectionsExtendedInfo) {
            var connectionExtended = connectionsExtendedInfo.find(function (c) { return c.connectionId === connection.connectionId; });
            if (!!connectionExtended) {
                connection.publishers.forEach(function (pub) {
                    var publisherExtended = connectionExtended.publishers.find(function (p) { return p.streamId === pub.streamId; });
                    pub['webRtc'] = {
                        kms: {
                            events: publisherExtended.events,
                            localCandidate: publisherExtended.localCandidate,
                            remoteCandidate: publisherExtended.remoteCandidate,
                            clientIceCandidates: publisherExtended.clientIceCandidates,
                            serverIceCandidates: publisherExtended.serverIceCandidates,
                            webrtcEndpointName: publisherExtended.webrtcEndpointName,
                            localSdp: publisherExtended.localSdp,
                            remoteSdp: publisherExtended.remoteSdp
                        }
                    };
                    pub['localCandidatePair'] = parseRemoteCandidatePair(pub['webRtc'].kms.remoteCandidate);
                    if (!!publisherExtended.serverStats) {
                        pub['webRtc'].kms.serverStats = publisherExtended.serverStats;
                    }
                });
                var subscriberArray_1 = [];
                connection.subscribers.forEach(function (sub) {
                    var subscriberExtended = connectionExtended.subscribers.find(function (s) { return s.streamId === sub; });
                    var subAux = {};
                    // Standard properties
                    subAux['streamId'] = sub;
                    subAux['publisher'] = subscriberExtended.publisher;
                    // WebRtc properties
                    subAux['createdAt'] = subscriberExtended.createdAt;
                    subAux['webRtc'] = {
                        kms: {
                            events: subscriberExtended.events,
                            localCandidate: subscriberExtended.localCandidate,
                            remoteCandidate: subscriberExtended.remoteCandidate,
                            clientIceCandidates: subscriberExtended.clientIceCandidates,
                            serverIceCandidates: subscriberExtended.serverIceCandidates,
                            webrtcEndpointName: subscriberExtended.webrtcEndpointName,
                            localSdp: subscriberExtended.localSdp,
                            remoteSdp: subscriberExtended.remoteSdp
                        }
                    };
                    subAux['localCandidatePair'] = parseRemoteCandidatePair(subAux['webRtc'].kms.remoteCandidate);
                    if (!!subscriberExtended.serverStats) {
                        subAux['webRtc'].kms.serverStats = subscriberExtended.serverStats;
                    }
                    subscriberArray_1.push(subAux);
                });
                connection.subscribers = subscriberArray_1;
            }
        };
        var parseRemoteCandidatePair = function (candidateStr) {
            if (!candidateStr) {
                return 'ERROR: No remote candidate available';
            }
            var array = candidateStr.split(/\s+/);
            return {
                portNumber: array[5],
                ipAddress: array[4],
                transport: array[2].toLowerCase(),
                candidateType: array[7],
                priority: array[3],
                raw: candidateStr
            };
        };
        return new Promise(function (resolve, reject) {
            axios_1.default
                .get(_this.host + OpenVidu.API_SESSIONS + '?webRtcStats=true', {
                headers: {
                    Authorization: _this.basicAuth
                },
                validateStatus: function (_) { return true; }
            })
                .then(function (res) {
                if (res.status === 200) {
                    // Global changes
                    var globalChanges_1 = false;
                    // Collection of sessionIds telling whether each one of them has changed or not
                    var sessionChanges_1 = {};
                    // 1. Array to store fetched sessionIds and later remove closed ones
                    var fetchedSessionIds_2 = [];
                    res.data.content.forEach(function (jsonSession) {
                        var fetchedSession = new Session_1.Session(_this, jsonSession);
                        fetchedSession.connections.forEach(function (connection) {
                            addWebRtcStatsToConnections(connection, jsonSession.connections.content);
                        });
                        fetchedSessionIds_2.push(fetchedSession.sessionId);
                        var storedSession = _this.activeSessions.find(function (s) { return s.sessionId === fetchedSession.sessionId; });
                        if (!!storedSession) {
                            // 2. Update existing Session
                            var changed_1 = !storedSession.equalTo(fetchedSession);
                            if (!changed_1) {
                                // Check if server webrtc information has changed in any Publisher object (Session.equalTo does not check Publisher.webRtc auxiliary object)
                                fetchedSession.connections.forEach(function (connection, index1) {
                                    for (var index2 = 0; index2 < connection['publishers'].length && !changed_1; index2++) {
                                        changed_1 =
                                            changed_1 ||
                                                JSON.stringify(connection['publishers'][index2]['webRtc']) !==
                                                    JSON.stringify(storedSession.connections[index1]['publishers'][index2]['webRtc']);
                                    }
                                });
                            }
                            storedSession.resetWithJson(jsonSession);
                            storedSession.connections.forEach(function (connection) {
                                addWebRtcStatsToConnections(connection, jsonSession.connections.content);
                            });
                            logger.log("Available session '" + storedSession.sessionId + "' info fetched. Any change: " + changed_1);
                            sessionChanges_1[storedSession.sessionId] = changed_1;
                            globalChanges_1 = globalChanges_1 || changed_1;
                        }
                        else {
                            // 3. Add new Session
                            _this.activeSessions.push(fetchedSession);
                            logger.log("New session '" + fetchedSession.sessionId + "' info fetched");
                            sessionChanges_1[fetchedSession.sessionId] = true;
                            globalChanges_1 = true;
                        }
                    });
                    // 4. Remove closed sessions from local collection
                    for (var i = _this.activeSessions.length - 1; i >= 0; --i) {
                        var sessionId = _this.activeSessions[i].sessionId;
                        if (!fetchedSessionIds_2.includes(sessionId)) {
                            logger.log("Removing closed session '" + sessionId + "'");
                            sessionChanges_1[sessionId] = true;
                            globalChanges_1 = true;
                            _this.activeSessions.splice(i, 1);
                        }
                    }
                    logger.log('Active sessions info fetched: ', fetchedSessionIds_2);
                    resolve({ changes: globalChanges_1, sessionChanges: sessionChanges_1 });
                }
                else {
                    // ERROR response from openvidu-server. Resolve HTTP status
                    _this.handleError(res, reject);
                }
            })
                .catch(function (error) {
                // Request error.
                _this.handleError(error, reject);
            });
        });
    };
    // tslint:enable:no-string-literal
    /**
     * Disable all logging except error level
     */
    OpenVidu.prototype.enableProdMode = function () {
        logger.enableProdMode();
    };
    OpenVidu.prototype.getBasicAuth = function (secret) {
        return 'Basic ' + this.Buffer('OPENVIDUAPP:' + secret).toString('base64');
    };
    OpenVidu.prototype.setHostnameAndPort = function () {
        var url;
        try {
            url = new URL(this.hostname);
        }
        catch (error) {
            throw new Error('URL format incorrect: ' + error);
        }
        this.host = url.protocol + '//' + url.host;
    };
    /**
     * @hidden
     */
    OpenVidu.prototype.handleError = function (error, reject) {
        if (error.status) {
            // Error returned by openvidu-server
            reject(new Error(error.status.toString()));
        }
        else if (error.response) {
            // The request was made and the server responded with a status code (not 2xx)
            reject(new Error(error.response.status.toString()));
        }
        else if (error.request) {
            // The request was made but no response was received
            // `error.request` is an instance of XMLHttpRequest in the browser and an instance of
            // http.ClientRequest in node.js
            reject(new Error(error.request));
        }
        else {
            // Something happened in setting up the request that triggered an Error
            reject(new Error(error.message));
        }
    };
    /**
     * @hidden
     */
    OpenVidu.API_PATH = '/openvidu/api';
    /**
     * @hidden
     */
    OpenVidu.API_SESSIONS = OpenVidu.API_PATH + '/sessions';
    /**
     * @hidden
     */
    OpenVidu.API_TOKENS = OpenVidu.API_PATH + '/tokens';
    /**
     * @hidden
     */
    OpenVidu.API_RECORDINGS = OpenVidu.API_PATH + '/recordings';
    /**
     * @hidden
     */
    OpenVidu.API_RECORDINGS_START = OpenVidu.API_RECORDINGS + '/start';
    /**
     * @hidden
     */
    OpenVidu.API_RECORDINGS_STOP = OpenVidu.API_RECORDINGS + '/stop';
    /**
     * @hidden
     */
    OpenVidu.API_BROADCAST = OpenVidu.API_PATH + '/broadcast';
    /**
     * @hidden
     */
    OpenVidu.API_BROADCAST_START = OpenVidu.API_BROADCAST + '/start';
    /**
     * @hidden
     */
    OpenVidu.API_BROADCAST_STOP = OpenVidu.API_BROADCAST + '/stop';
    return OpenVidu;
}());
exports.OpenVidu = OpenVidu;
//# sourceMappingURL=OpenVidu.js.map