1. Gitlab 소스 클론 이후 빌드 및 배포할 수 있도록 정리한 문서

- 1. 사용한 JVM, 웹서버, WAS 제품 등의 종류와 설정 값, 버전(IDE버전 포함) 기재
저희 서비스는 MSA 아키텍처를 통해 인프라가 구성되었습니다.

[유레카 서버]
- JDK/JRE 버전 : 17.0.15
- JVM 제공자 : Eclipse Adoptium
- JVM 이름 : OpenJDK 64-Bit Server VM   
- 스프링부트 서비스로 내장 톰캣 기반으로 동작합니다.
- 아파치 톰캣 10.1.43 버전을 사용합니다.
- IDE 버전 : IntelliJ IDEA 2025.13

[APIGATEWAY 서버]
- JDK/JRE 버전 : 17.0.15
- JVM 제공자 : Eclipse Adoptium
- JVM 이름 : OpenJDK 64-Bit Server VM   
- 스프링부트 서비스로 내장 톰캣 기반으로 동작합니다.
- 아파치 톰캣 10.1.43 버전을 사용합니다.
- IDE 버전 : IntelliJ IDEA 2025.13

[CONFIG 서버]
- JDK/JRE 버전 : 17.0.15
- JVM 제공자 : Eclipse Adoptium
- JVM 이름 : OpenJDK 64-Bit Server VM   
- 스프링부트 서비스로 내장 톰캣 기반으로 동작합니다.
- 아파치 톰캣 10.1.43 버전을 사용합니다.
- IDE 버전 : IntelliJ IDEA 2025.13

[유저 서버]
- JDK/JRE 버전 : 17.0.15
- JVM 제공자 : Eclipse Adoptium
- JVM 이름 : OpenJDK 64-Bit Server VM   
- 스프링부트 서비스로 내장 톰캣 기반으로 동작합니다.
- 아파치 톰캣 10.1.43 버전을 사용합니다.
- IDE 버전 : IntelliJ IDEA 2025.13

[게임 서버]
- JDK/JRE 버전 : 17.0.15
- JVM 제공자 : Eclipse Adoptium
- JVM 이름 : OpenJDK 64-Bit Server VM   
- 스프링부트 서비스로 내장 톰캣 기반으로 동작합니다.
- 아파치 톰캣 10.1.43 버전을 사용합니다.
- IDE 버전 : IntelliJ IDEA 2025.13

[채팅 서버]
- JDK/JRE 버전 : 17.0.15
- JVM 제공자 : Eclipse Adoptium
- JVM 이름 : OpenJDK 64-Bit Server VM   
- 스프링부트 서비스로 내장 톰캣 기반으로 동작합니다.
- 아파치 톰캣 10.1.43 버전을 사용합니다.
- IDE 버전 : IntelliJ IDEA 2025.13

- 2. 빌드 시 사용되는 환경 변수 등의 내용 상세 기재
6개의 서비스 모두 실서버 배포시 active profile을 prod로 하여 배포하였습니다.
실서버 환경을 bringit-network라는 도커 네트워크 형태로 구성했기 때문에 실서버 배포시 네트워크를 꼭 명시해주어야 합니다.
특별히 게임 서비스의 경우 라이브킷 기능을 사용하기 때문에 추가적인 환경 변수를 선언해주어야 합니다.
(
    LIVEKIT_API_KEY=APInBSUFUYhUfdE,
    LIVEKIT_API_SECRET=LmvHoHYIsx4yAV4VuSAHISHAjaLsUeX3nBH6fdKn5ZB
)

실서버 배포 기준으로 사용되는 환경 변수를 정리하면 다음과 같습니다.
실서버 배포 기준이기 때문에 실서버 도커 네트워크 기준으로 설정했고 
로컬에서 실행할 경우 로컬 환경에 맞게 수정 필요합니다.

[API Gateway]
-e SPRING_PROFILES_ACTIVE=prod \
-e SPRING_APPLICATION_NAME=apigateway-service \
-e SPRING_CLOUD_CONFIG_NAME=apigateway-service \
-e SPRING_CLOUD_CONFIG_URI=http://config-service:8888 \
-e SPRING_RABBITMQ_HOST=rabbitmq \
-e EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://service-discovery:8761/eureka \
-e spring.data.redis.host=user-redis

[Config Service]
-e "spring.cloud.config.uri=http://config-service:8888"

[Eureka Service]
-e "spring.cloud.config.uri=http://config-service:8888"

[User Service]
-e "SPRING_PROFILES_ACTIVE=prod" \
-e "spring.kafka.bootstrap-servers=172.18.0.101:9092" \
-e "spring.cloud.config.uri=http://config-service:8888" \
-e "spring.rabbitmq.host=rabbitmq" \
-e "spring.zipkin.base-url=http://zipkin:9411" \
-e "eureka.client.serviceUrl.defaultZone=http://service-discovery:8761/eureka" \
-e "spring.data.redis.host=user-redis" \
-e "logging.file=/api-logs/users-ws.log" \
-e "swagger.server-url=https://i13C207.p.ssafy.io/api/v1/users" \

[Game Service]
-e "SPRING_PROFILES_ACTIVE=prod" \
-e SPRING_APPLICATION_NAME=game-service \
-e SPRING_CLOUD_CONFIG_NAME=game-service \
-e "spring.kafka.bootstrap-servers=172.18.0.101:9092" \
-e "spring.cloud.config.uri=http://config-service:8888" \
-e "spring.rabbitmq.host=rabbitmq" \
-e "spring.zipkin.base-url=http://zipkin:9411" \
-e "eureka.client.serviceUrl.defaultZone=http://service-discovery:8761/eureka" \
-e "spring.data.redis.host=game-redis" \
-e "logging.file=/api-logs/games-ws.log" \
-e "swagger.server-url=https://i13C207.p.ssafy.io/api/v1/games" \
-e "LIVEKIT_API_KEY=APInBSUFUYhUfdE" \
-e "LIVEKIT_API_SECRET=LmvHoHYIsx4yAV4VuSAHISHAjaLsUeX3nBH6fdKn5ZB" \

- 3. 배포 시 특이사항 기재
저희 서비스는 카프카와 rabbitmq를 사용하기 때문에 카프카와 rabbitmq가 반드시 먼저 실행되어 있어야 합니다.
서비스 실행을 위해 필요한 도커 컨테이너를 리스트업하면 다음과 같습니다.

- rabbitmq
- zookeeper
- kafka
- 유저 레디스
- 게임 레디스
- 유저 postgresql db
- 게임 postgresql db
- 채팅 postgresql db

또한 실서버 배포의 경우 같은 도커 네트워크 상에서 구동하도록 했습니다.

- 4. DB 접속 정보 등 프로젝트(ERD)에 활용되는 주요 계정 및 프로퍼티가 정의된 파일 목록

[swagger 주소]
https://i13c207.p.ssafy.io/webjars/swagger-ui/index.html

[데이터베이스]
- 유저 서비스 데이터베이스
host: i13c207.p.ssafy.io
port: 5431
database: users
username: postgres
pwd: 1234
              
- 게임 서비스 데이터베이스
host: i13c207.p.ssafy.io
port: 5433
database: games
username: postgres
pwd: 1234

- 채팅 서비스 데이터베이스
host: i13c207.p.ssafy.io
port: 5434
database: chats
username: postgres
pwd: 1234

- 서버 배포시 필요한 추가적인 설정 정보들은 깃랩

https://lab.ssafy.com/if-else/yolo-bring-it-config.git

에서 관리합니다.

config 서비스를 형태로 rabbitmq를 통해 개별 마이크로서비스에 설정 정보들이 반영되는 형태로 아키텍처 구성